(function(Module) {

    // Жизненный цикл модулей:
    // init   - вызывается для всех модулей при загрузке страницы до обращения к любым другим методам
    // attach - вызывается для enabled, ещё не включённых не dirty модулей при загрузке страницы или после включения их в конфигураторе
    // update - вызывается для enabled, уже включённых, не dirty модулей при изменении их конфигурации
    // detach - вызывается для disabled, ещё не выключенных не dirty модулей при выключении их в конфиге
    // ...    - жизненный цикл от attach до detach может повторяться без перезагрузки страницы
    //
    // модуль становится dirty, если он не смог отработать detach() или update() без перезагрузки страницы (вернул false)
    // такой модуль движок не будет пытаться включать/выключать или обновлять до перезагрузки страницы

    /**
     *  Конструктор для класса нашего модуля. Именно эта функция должна быть в итоге экспортирована
     *  Название функции стоит давать осмысленное
     */
    function StubModule() {
    }

    // Обязательное наследование от базового класса модуля, в котором реализованы методы:
    // - isEnabled()     - включён ли данный модуль
    // - isDirty()       - модуль считается грязным, если он не смог убрать за собой при detach() или обновиться при update()
    // - getConfig()     - получить текущий конфиг
    // - saveConfig(obj) - обновить конфиг по инициативе модуля. При таком изменении конфига update не вызывается автоматически
    StubModule.prototype = new Module()

    /**
     *  Название или несколько слов о функциональности модуля
     *
     *  @optional по умолчанию возвращает id модуля
     */
    StubModule.prototype.getLabel = function stub_getLabel() {
        return "Stub"
    }

    /**
     *  В этом методе модуль получает конфиг и, возможно, проводит
     *  его инициализацию умолчальными значениями, если config == null.
     *  После выполнения метода init метод getConfig() должен возвращать
     *  актуальный конфиг модуля
     *
     *  @param config      - конфигурация, сохранённая с прошлого запуска модуля
     *  @param initArgs... - дополнительные параметры, передаваемые функции App.add() для этого модуля
     *
     *  @return конфиг, при необходимости инициализированный значениями по умолчанию
     *
     *  @throws Error при ошибке в данных. В этом случае данные будут обнулены и модуль будет перезагружен
     *
     *  @optional по умолчанию возвращает сохранённый конфиг без изменений и не выполняет никакой инициализации
     */
    StubModule.prototype.init = function stub_init(config/*, initArgs...*/) {
        return config
    }

    /**
     *  Выполнить данный модуль на странице
     *
     *  @param config - актуальные данные конфигурации
     */
    StubModule.prototype.attach = function stub_attach(config) {

    }

    /**
     *  Вызывается после изменения конфига
     *  Модуль должен либо применить изменения немедленно, либо продолжить работать со
     *  старой конфигурацией и вернуть false
     *
     *  @param config - новый конфиг
     *
     *  @return true или ничего, если модуль смог переварить эти изменения
     *          false, если для применения изменений нужна перезагрузка страницы
     *
     *  @optional умолчальная реализация пробует сделать detach и потом и attach
     */
    StubModule.prototype.update = function stub_update(config) {
        return false
    }

    /**
     *  Выключить данный модуль на странице
     *
     *  @return true или ничего, если модуль смог выключиться сам
     *          false, если для выключения модуля нужна перезагрузка страницы
     *
     *  @optional умолчальная реализация всегда возвращает false
     */
    StubModule.prototype.detach = function stub_detach() {
        return false
    }

    return StubModule
})(Module)
